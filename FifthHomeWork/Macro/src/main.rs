

// TODO: 理解和解读宏？
// 1. 一个简单的声明宏是一个在编译时展开的代码片段，它允许我们在编写代码时使用类似于函数调用的语法，但实际上它在编译时会被替换为指定的代码块。声明宏是通过 macro_rules! 宏来定义的，它允许我们指定宏的名称和参数，并定义宏展开的规则。
// 2.在下面的代码中，我们定义了一个名为 hello 的声明宏，它没有任何参数。当我们在代码中使用 hello!() 时，宏将被展开为 println!("Hello, macro!");
// 3. 在编译过程中，当遇到 hello!() 的调用时，编译器会找到定义的 hello 宏，然后将宏的规则应用于 hello!()，将其展开为指定的代码块 println!("Hello, macro!");。因此，最终生成的代码将是：
// fn main() {
//   println!("Hello, macro!");
//}
// 4.这就是简单声明宏的工作原理和编译过程。声明宏允许我们在编写代码时使用更灵活和高级的语法，将重复的代码抽象为宏，使代码更加简洁和易于维护。



macro_rules! hello {
    () => {
        println!("Hello, Macros!!!!")
    };
}

fn main() {
    hello!();
}
